# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "SecOps Detection As Code"

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - closed # Required for the merge/apply trigger
env:
  TF_VAR_secops_customer_id: # TODO replace with SecOps Customer ID
  TF_VAR_secops_project_id: # TODO replace with SecOps Project ID
  TF_VAR_secops_region: # TODO replace with SecOps Region
  SERVICE_ACCOUNT: # TODO replace with WIF SA
  WIF_PROVIDER: projects/XXXXXXXXX/locations/global/workloadIdentityPools/xxxxxxxx/providers/xxxxxx #TODO replace with wif provider
  TF_VERSION: 1.6.5
  TF_WORKING_DIR: ./pipelines/detection-as-code

jobs:
  plan:
    name: 'Terraform Plan'
    # Plan runs for opened and updated PRs, but not for closed PRs.
    if: github.event.action != 'closed'
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{env.WIF_PROVIDER}}
          service_account: ${{env.SERVICE_ACCOUNT}}
          access_token_lifetime: 900s

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        working-directory: ${{ env.TF_WORKING_DIR }}/scripts
        run: pip install -r requirements.txt

      - name: Verify Rules
        working-directory: ${{ env.TF_WORKING_DIR }}/scripts
        run: python main.py verify-rules

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TF_VERSION}}

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -input=false -out=plan.out -no-color -lock=false
        # The -lock=false flag is used for planning in CI.
        # Ensure that no other concurrent workflows are running to avoid state corruption.

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}/plan.out
          retention-days: 1

      - name: Post comment to Pull Request
        uses: actions/github-script@v7
        if: always() # Run even if previous steps fail to report the status
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
          PLAN_ERROR: ${{ steps.plan.outputs.stderr }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Validation Output</summary>

            *   **Init:** \`${{ steps.init.outcome }}\`
            *   **Validate:** \`${{ steps.validate.outcome }}\`

            </details>

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            ${process.env.PLAN_ERROR}
            \`\`\`

            </details>

            *Pusher: @${{github.actor}}, Action: \`${{github.event_name}}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  apply:
    name: 'Terraform Apply'
    # Apply runs only when a PR is merged into the main branch.
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    needs: plan
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{env.WIF_PROVIDER}}
          service_account: ${{env.SERVICE_ACCOUNT}}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TF_VERSION}}

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -no-color

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -input=false -no-color plan.out
